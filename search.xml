<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Angular 组件</title>
      <link href="/2019/01/07/Angular-%E7%BB%84%E4%BB%B6/"/>
      <url>/2019/01/07/Angular-%E7%BB%84%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h2 id="框架模式"><a href="#框架模式" class="headerlink" title="框架模式"></a>框架模式</h2><h3 id="MVC"><a href="#MVC" class="headerlink" title="MVC"></a>MVC</h3><p><img src="/2019/01/07/Angular-组件/MVC.png" alt="MVC"></p><p>Model(模型)、View(视图)、Controller(控制器)</p><h3 id="MVP"><a href="#MVP" class="headerlink" title="MVP"></a>MVP</h3><p><img src="/2019/01/07/Angular-组件/MVP.png" alt="MVP"></p><p>Model(模型)、View(视图)、Presenter(呈现)</p><h3 id="MVVM"><a href="#MVVM" class="headerlink" title="MVVM"></a>MVVM</h3><p><img src="/2019/01/07/Angular-组件/MVVM.png" alt="MVVM"></p><p>Model(模型)、View(视图)、View-Model(视图-模型)</p><h2 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h2><p>组件负责控制屏幕的某一块区域，即视图。</p><p>组件是<code>Angular</code>的核心理念，模块化机制是为组件化服务的。</p><h3 id="创建组件"><a href="#创建组件" class="headerlink" title="创建组件"></a>创建组件</h3><p>命令：</p><pre><code>ng g component components/componentName</code></pre><p>在<code>AppModule</code>中声明组件：</p><ul><li><p>引入：</p><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">{</span> ComponentName <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./components/...'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>声明： 在<code>declarations</code>数组中声明</p></li></ul><p><strong>如果通过命令创建组件，Angular会自动添加声明。</strong></p><h3 id="使用组件"><a href="#使用组件" class="headerlink" title="使用组件"></a>使用组件</h3><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>app-组件名</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>app-组件名</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="组件的基础组成"><a href="#组件的基础组成" class="headerlink" title="组件的基础组成"></a>组件的基础组成</h3><h4 id="组件装饰器-–-component"><a href="#组件装饰器-–-component" class="headerlink" title="组件装饰器 – @component()"></a>组件装饰器 – <code>@component()</code></h4><p>每个组件类必须用<code>@component</code>修饰才能成为Angular组件。</p><h4 id="组件元数据"><a href="#组件元数据" class="headerlink" title="组件元数据"></a>组件元数据</h4><h4 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h4><p>每个组件只能关联一个模板，这个模板会渲染到页面上。</p><h4 id="组件类"><a href="#组件类" class="headerlink" title="组件类"></a>组件类</h4><p>定义组件的逻辑。</p><h2 id="组件交互"><a href="#组件交互" class="headerlink" title="组件交互"></a>组件交互</h2><p><img src="/2019/01/07/Angular-组件/components.png" alt="组件交互"></p><h3 id="组件交互（父组件到子组件）–-Input"><a href="#组件交互（父组件到子组件）–-Input" class="headerlink" title="组件交互（父组件到子组件）– @Input"></a>组件交互（父组件到子组件）– <code>@Input</code></h3><p>子组件引入 <code>Input</code></p><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">{</span> Input <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@angular/core'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>声明属性</p><pre class="line-numbers language-typescript"><code class="language-typescript">@<span class="token function">Input</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 属性名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>绑定属性</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>app-组件名</span> <span class="token attr-name">[属性名]</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>属性值<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>app-组件名</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="组件交互（子组件到父组件）-–-Output"><a href="#组件交互（子组件到父组件）-–-Output" class="headerlink" title="组件交互（子组件到父组件） – @Output"></a>组件交互（子组件到父组件） – <code>@Output</code></h3><p>子组件引入<code>EventEmitter</code>,<code>Output</code></p><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">{</span> Component<span class="token punctuation">,</span> EventEmitter<span class="token punctuation">,</span> Output<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@angular/core'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>子组件暴露<code>EventEmitter</code>属性，并用<code>@Output</code>装饰</p><pre class="line-numbers language-typescript"><code class="language-typescript">@<span class="token function">Output</span><span class="token punctuation">(</span><span class="token punctuation">)</span> eventName <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EventEmitter</span><span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>通过<code>EventEmitter</code>的<code>emit</code>方法传递数据</p><pre class="line-numbers language-type"><code class="language-type">this.ecentName.emit(data);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>父组件绑定事件，通过事件对象<code>($event)</code>接收数据</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>app-组件名</span> <span class="token attr-name">(eventName)</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fun($event)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>app-组件名</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2><h3 id="生命周期-1"><a href="#生命周期-1" class="headerlink" title="生命周期"></a>生命周期</h3><p>Angular每个组件都存在一个生命周期，从创建，变更到销毁。</p><h3 id="生命周期钩子（lifecycle-hook）"><a href="#生命周期钩子（lifecycle-hook）" class="headerlink" title="生命周期钩子（lifecycle hook）"></a>生命周期钩子（lifecycle hook）</h3><p>Angular提供组件生命周期钩子，把这些关键时刻暴露出来，赋予在这些关键时刻和组件进行交互的能力。</p><p><code>Angular core</code>库里定义了<strong>生命周期钩子</strong>接口。</p><p>每个接口都有唯一的一个钩子方法。</p><p><code>ngOnChanges()</code></p><p>检测到组件输入属性发生变化时调用。</p><p><code>ngOnInit()</code></p><p>在构造函数之后马上执行复杂的初始化逻辑。</p><p>在Angular设置完输入属性后，对该组件进行准备。</p><p>只调用一次</p><p><code>ngDoCheck()</code></p><p>检测被Angular忽略的更改。</p><p><code>ngAfterContentInit()</code></p><p>在投影（映射）内容初始化后调用，只调用一次。</p><p><code>ngAfterContentChecked()</code></p><p>在投影（映射）内容变更检测之后调用。</p><p><code>ngAfterViewInit()</code></p><p>在Angular完全初始化了组件的视图后调用。</p><p><code>ngAfterViewChecked()</code></p><p>在默认的变更检测器完成了对组件视图的变更检测之后调用。</p><p><code>ngOnDestory()</code></p><p>执行组件注销时的清理工作。</p><h3 id="ng-content内容映射"><a href="#ng-content内容映射" class="headerlink" title="ng-content内容映射"></a><code>ng-content</code>内容映射</h3><p>在组件中嵌入模板代码的<strong>占位符</strong>，告诉angular在何处插入模板代码。</p><p>方便定制可复用的组件。</p><p>当有多个映射时，模板代码取类名进行区分，<code>ng-content</code>通过<code>select</code>属性进行绑定。</p><p>父组件：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>app-component</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>header<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        ...    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>app-component</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>子组件：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ng-content</span> <span class="token attr-name">select</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>.header<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ng-content</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Angular </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Angular </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Angular 环境搭建</title>
      <link href="/2019/01/07/Angular-%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
      <url>/2019/01/07/Angular-%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<h2 id="Angular-介绍"><a href="#Angular-介绍" class="headerlink" title="Angular 介绍"></a>Angular 介绍</h2><p>创始人： Misko Hevery</p><p><img src="/2019/01/07/Angular-环境搭建/misko.png" alt="Misko"></p><p><code>Angular</code>是一个来自谷歌的开源的前端<code>JavaScript</code>框架，诞生于2009年。</p><p>2015年之前<code>Angular 1.x</code>广泛应用，开发单页面应用无人能敌。</p><p>2016年9月，<code>Angular 2.0</code>发布，颠覆之前的版本。</p><p>2017年3月，<code>Angular4</code> 发布。</p><p>2017年11月，<code>Angular5</code> 发布。</p><p>2018年5月，<code>Angular6</code>发布 。</p><p><code>Angular2.0</code> 以后基于 <code>TypeScript。</code></p><h2 id="Angular核心特性"><a href="#Angular核心特性" class="headerlink" title="Angular核心特性"></a>Angular核心特性</h2><ul><li>组件化：<code>Angular</code>的核心所在</li><li>数据绑定</li><li>服务</li><li>依赖注入机制</li><li>路由及路由嵌套</li><li>指令系统</li></ul><h2 id="Cordova"><a href="#Cordova" class="headerlink" title="Cordova"></a>Cordova</h2><ul><li><code>Cordova</code>是一个开源的移动开发框架<ul><li>允许使用标准的Web技术<code>HTML5</code>，<code>CSS3</code>和<code>JavaScript</code>进行跨平台开发</li><li>插件是<code>Cordova</code>框架的重要组成部分，他提供了<code>Cordova</code>和原生组件互相通信的API，能过通过<code>JavaScript</code>调用原生功能</li></ul></li></ul><h2 id="Angular-环境搭建"><a href="#Angular-环境搭建" class="headerlink" title="Angular 环境搭建"></a>Angular 环境搭建</h2><ol><li><p>安装最新版<code>Node</code></p></li><li><p>全局安装<code>Angular CLI</code>脚手架工具</p><ul><li><p>是一个命令行界面工具，可以创建项、添加文件以及执行其他任务，如测试、打包和发布。</p></li><li><p>命令： </p><pre class="line-numbers language-javascript"><code class="language-javascript">npm install <span class="token operator">-</span>g @angular<span class="token operator">/</span>cli<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>只需安装一次</p></li><li><p>可安装淘宝镜像</p><pre class="line-numbers language-javascript"><code class="language-javascript">npm install <span class="token operator">-</span>g cnpm <span class="token operator">--</span>registry<span class="token operator">=</span>https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>registry<span class="token punctuation">.</span>npm<span class="token punctuation">.</span>taobao<span class="token punctuation">.</span>org<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li><li><p>项目启动</p><ul><li><p>创建项目</p><ul><li><p>命令：</p><pre class="line-numbers language-javascript"><code class="language-javascript">ng <span class="token keyword">new</span> 项目名称<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li><li><p>进入项目</p><ul><li><p>命令</p><pre class="line-numbers language-javascript"><code class="language-javascript">cd 项目名称<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li><li><p>启动服务器</p><ul><li><p>命令</p><pre class="line-numbers language-javascript"><code class="language-javascript">ng serve <span class="token operator">--</span>open<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><code>ng serve</code>命令会启动开发服务器</p></li><li><p><code>--open</code>可以自动打开浏览器并访问<code>http://localhost:4200</code></p></li></ul></li></ul></li></ol><h2 id="项目文件概览"><a href="#项目文件概览" class="headerlink" title="项目文件概览"></a>项目文件概览</h2><h3 id="src文件夹"><a href="#src文件夹" class="headerlink" title="src文件夹"></a><code>src</code>文件夹</h3><p>包含所有的<code>Angular</code>组件、模板、样式图片以及应用所需的任何东西，这个文件夹之外的文件都是为构建应用提供支持用的。</p><h4 id="app-app-component-ts-html-css-spec-ts"><a href="#app-app-component-ts-html-css-spec-ts" class="headerlink" title="app/app.component.{ ts,html,css,spec.ts}"></a><code>app/app.component.{ ts,html,css,spec.ts}</code></h4><p>使用<code>HTML</code>模板、<code>CSS</code>样式和单元测试定义<code>AppComponent</code>组件。它是跟组件，随着应用的扩展它会成为一颗组件树的根节点。</p><h4 id="app-app-module-ts"><a href="#app-app-module-ts" class="headerlink" title="app/app.module.ts"></a><code>app/app.module.ts</code></h4><p>定义<code>AppModule</code>，根模块为<code>Angular</code>描述如何组装应用。</p><h4 id="main-ts"><a href="#main-ts" class="headerlink" title="main.ts"></a><code>main.ts</code></h4><p>应用的主要入口，使用<code>JIT</code> 编译器编译本应用，并启动应用的根模块<code>AppModule</code>，使其运行在浏览器中。</p><h4 id="style-css"><a href="#style-css" class="headerlink" title="style.css"></a><code>style.css</code></h4><p>全局样式，大多数情况下，会在组件中使用局部样式，以利于维护，而那些影响整个应用的样式需集中存放在这里。</p><h4 id="browserslist、karma-conf-js、polyfills-ts、tslint-json、tsconfig-app-spec-json"><a href="#browserslist、karma-conf-js、polyfills-ts、tslint-json、tsconfig-app-spec-json" class="headerlink" title="browserslist、karma.conf.js、polyfills.ts、tslint.json、tsconfig.{app|spec}.json"></a><code>browserslist、karma.conf.js、polyfills.ts、tslint.json、tsconfig.{app|spec}.json</code></h4><p>程序配置文件。</p><h3 id="根目录"><a href="#根目录" class="headerlink" title="根目录"></a>根目录</h3><h4 id="e2e"><a href="#e2e" class="headerlink" title="e2e/"></a><code>e2e/</code></h4><p>端到端（end-to-end）测试</p><h4 id="node-modules"><a href="#node-modules" class="headerlink" title="node_modules/"></a><code>node_modules/</code></h4><p><code>Node.js</code>创建了这个文件夹，并把<code>package.json</code>中列举的所有第三方模块都放在其中。</p><h4 id="angular-json"><a href="#angular-json" class="headerlink" title="angular.json"></a><code>angular.json</code></h4><p><code>Angular CLI</code>的配置文件。</p><p><code>package.json</code></p><p>npm配置文件，其中列出了项目使用到的第三方依赖包。</p><h4 id="gitignore、-editorconfig-、README-md、tslint-json、tsconfig-json、protractor-conf-js"><a href="#gitignore、-editorconfig-、README-md、tslint-json、tsconfig-json、protractor-conf-js" class="headerlink" title=".gitignore、 .editorconfig 、README.md、tslint.json、tsconfig.json、protractor.conf.js"></a><code>.gitignore、 .editorconfig 、README.md、tslint.json、tsconfig.json、protractor.conf.js</code></h4><p>编辑器，Git等的配置文件。</p><h2 id="项目启动过程"><a href="#项目启动过程" class="headerlink" title="项目启动过程"></a>项目启动过程</h2><ul><li><code>angular.json</code>  定义了应用程序启动时加载的 HTML 页面（index.html ）和 脚本文件 （ main.ts ）</li><li><code>main.ts</code> 中定义了程序启动的模块（ APPModule ）</li><li><code>app.module.ts</code>中定义了程序启动的组件（ AppComponent ）</li><li><code>app.component.ts</code>中定义了组件的模板及使用组件时的选择器名称（ app-root ）</li><li>程序将在 <code>index.html</code> 中检索<code>&lt;app-root&gt;</code>，将其替换成组件中的内容</li></ul><h2 id="模板语法"><a href="#模板语法" class="headerlink" title="模板语法"></a>模板语法</h2><h3 id="插值表达式"><a href="#插值表达式" class="headerlink" title="插值表达式"></a>插值表达式</h3><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>    {{ title }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>可以把计算后的字符串插入到HTML标签内或对标签的属性进行赋值。</p><h3 id="属性绑定"><a href="#属性绑定" class="headerlink" title="属性绑定"></a>属性绑定</h3><pre class="line-numbers language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- [属性名] = "" --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">[src]</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>imgUrl<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="事件绑定"><a href="#事件绑定" class="headerlink" title="事件绑定"></a>事件绑定</h3><pre class="line-numbers language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- (事件名) = "eventFun()" --></span>&lt;button (click) = "clickFun()"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="双向数据绑定-–-ngModel"><a href="#双向数据绑定-–-ngModel" class="headerlink" title="双向数据绑定 – [(ngModel)]"></a>双向数据绑定 – <code>[(ngModel)]</code></h3><p>数据通过属性绑定从组件传到输入框，用户的修改通过事件绑定传回组件，把属性值设置为最新的值。</p><p>注意引入： <code>FormsModule</code></p><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">{</span> FormsModule <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@angular/forms'</span><span class="token punctuation">;</span>imports<span class="token punctuation">:</span> <span class="token punctuation">[</span> BrowserModule<span class="token punctuation">,</span> FormsModule<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Angular </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Angular </tag>
            
            <tag> 环境搭建 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Node.js Stream-流</title>
      <link href="/2019/01/06/Node-js-Stream-%E6%B5%81/"/>
      <url>/2019/01/06/Node-js-Stream-%E6%B5%81/</url>
      
        <content type="html"><![CDATA[<p><code>Stream</code>是一个抽象接口，Node中有很多对象实现了这个借口。例如对http服务器发起请求的<code>request</code>对象就是一个<code>Stream</code>，还有<code>stdout（标准输出）</code>。</p><p><code>Node.js Stream</code>有四种流类型：</p><ol><li><code>Readable</code> -&gt; 可读操作。</li><li><code>Writable</code> - &gt; 可写操作。</li><li><code>Duplex</code> - &gt; 可读可写操作。</li><li><code>Transform</code> - &gt; 操作被写入数据，然后读出结果。</li></ol><p>所有的<code>Stream</code>对象都是<code>EventEmitter</code>的实例。常用的事件有：</p><ol><li><code>data</code> -&gt; 当有数据可读时触发。</li><li><code>end</code> - &gt; 没有更多的数据可读时触发。</li><li><code>error</code> - &gt; 在接收和写入过程中发生错误时触发。</li><li><code>finish</code> - &gt; 所有数据已被写入到底层系统时触发。</li></ol><h2 id="从流中读取数据"><a href="#从流中读取数据" class="headerlink" title="从流中读取数据"></a>从流中读取数据</h2><p>创建input.txt文件，内容如下：</p><pre class="line-numbers language-javascript"><code class="language-javascript">百度：www<span class="token punctuation">.</span>baidu<span class="token punctuation">.</span>com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>创建main.js文件，内容如下：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> data <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 创建可读流</span><span class="token keyword">var</span> readerStream <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">createReadStream</span><span class="token punctuation">(</span><span class="token string">'input.txt'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 设置编码为utf-8</span>readerStream<span class="token punctuation">.</span><span class="token function">setEncoding</span><span class="token punctuation">(</span><span class="token string">'UTF8'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 处理流事件 --> data, end, error</span>rederStream<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'data'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>chunk<span class="token punctuation">)</span><span class="token punctuation">{</span>    data <span class="token operator">+</span><span class="token operator">=</span> chunk<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>readerStream<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'end'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>readerStream<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'error'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">.</span>stack<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'程序执行完毕'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行代码后结果如下：</p><pre class="line-numbers language-javascript"><code class="language-javascript">程序执行完毕百度： www<span class="token punctuation">.</span>baidu<span class="token punctuation">.</span>com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="写入流"><a href="#写入流" class="headerlink" title="写入流"></a>写入流</h2><p>创建main.js文件，代码如下：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"fs"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> data <span class="token operator">=</span> <span class="token string">'百度：www.baidu.com'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 创建一个可以写入的流，写入到文件 output.txt 中</span><span class="token keyword">var</span> writerStream <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">createWriteStream</span><span class="token punctuation">(</span><span class="token string">'output.txt'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 使用 utf8 编码写入数据</span>writerStream<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span><span class="token string">'UTF8'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 标记文件末尾</span>writerStream<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 处理流事件 --> data, end, and error</span>writerStream<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'finish'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"写入完成。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>writerStream<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'error'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">{</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">.</span>stack<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"程序执行完毕"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上程序会将<code>data</code>变量的数据写入到output.txt中。代码执行结果如下；</p><pre class="line-numbers language-javascript"><code class="language-javascript">$ node main<span class="token punctuation">.</span>js程序执行完毕写入完成。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>查看output.txt文件的内容：</p><pre class="line-numbers language-javascript"><code class="language-javascript">$ cat output<span class="token punctuation">.</span>txt百度：www<span class="token punctuation">.</span>baidu<span class="token punctuation">.</span>com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="管道流"><a href="#管道流" class="headerlink" title="管道流"></a>管道流</h2><p>管道提供了一个输出流到输入流的机制。通常我们用于从一个流中获取数据并将数据传递到另外一个流中。</p><p><img src="/2019/01/06/Node-js-Stream-流/source-dest.png" alt="管道流"></p><p>我们把文件比作装水的桶，而内容就是桶中的水，我们用一根管道（pipe）链接两个水桶，使得一个水桶里的水可以流入另一个桶。这样就慢慢的实现了大文件的复制过程。</p><p>设置input.txt文件内容如下：</p><pre class="line-numbers language-javascript"><code class="language-javascript">百度：www<span class="token punctuation">.</span>baidu<span class="token punctuation">.</span>com管道流操作实例<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>创建main.js文件，代码如下：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 创建一个可读流</span><span class="token keyword">var</span> readerStream <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">createReadStream</span><span class="token punctuation">(</span><span class="token string">'input.txt'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 创建一个可写流</span><span class="token keyword">var</span> writerStrean <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">createWriteStream</span><span class="token punctuation">(</span><span class="token string">'output.txt'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 管道读写操作</span><span class="token comment" spellcheck="true">// 读取input.txt的内容，并将内容写入到output.txt文件中。</span>readerStream<span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>writeStream<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'程序执行完毕'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行后，查看output.txt的内容：</p><pre class="line-numbers language-javascript"><code class="language-javascript">百度：www<span class="token punctuation">.</span>baidu<span class="token punctuation">.</span>com管道流操作实例<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="链式流"><a href="#链式流" class="headerlink" title="链式流"></a>链式流</h2><p>链式是通过连接输出流到另外一个流并创建多个流操作链的机制。链式流一般用于管道操作。</p><p>接下来我们就是用管道和链式来压缩和解压文件。</p><p>创建compress.js文件，代码如下：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"fs"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> zlib <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'zlib'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 压缩 input.txt 文件为 input.txt.gz</span>fs<span class="token punctuation">.</span><span class="token function">createReadStream</span><span class="token punctuation">(</span><span class="token string">'input.txt'</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>zlib<span class="token punctuation">.</span><span class="token function">createGzip</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>fs<span class="token punctuation">.</span><span class="token function">createWriteStream</span><span class="token punctuation">(</span><span class="token string">'input.txt.gz'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"文件压缩完成。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>压缩完成。</p><p>创建decompress.js文件，代码如下；</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"fs"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> zlib <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'zlib'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 解压 input.txt.gz 文件为 input.txt</span>fs<span class="token punctuation">.</span><span class="token function">createReadStream</span><span class="token punctuation">(</span><span class="token string">'input.txt.gz'</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>zlib<span class="token punctuation">.</span><span class="token function">createGunzip</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>fs<span class="token punctuation">.</span><span class="token function">createWriteStream</span><span class="token punctuation">(</span><span class="token string">'input.txt'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"文件解压完成。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>解压完成。</p><hr><p>参考于 <a href="http://www.runoob.com" target="_blank" rel="noopener">www.runoob.com</a></p>]]></content>
      
      
      <categories>
          
          <category> Node.js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Node.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Node.js EventEmitter</title>
      <link href="/2019/01/04/Node-js-EventEmitter/"/>
      <url>/2019/01/04/Node-js-EventEmitter/</url>
      
        <content type="html"><![CDATA[<p>node.js所有的异步I/O操作在完成时都会发送一个事件到事件队列。</p><p>Node.js里面的许多对象都会分发事件： 一个<code>net.server</code>对象会在每次有新连接时触发一个事件，一个<code>fs.ReadStream</code>对象会在文件被打开的时候触发一个事件。所有这些产生事件的对象都是<code>events.EventEmitter</code>的实例。</p><h2 id="EventEmitter类"><a href="#EventEmitter类" class="headerlink" title="EventEmitter类"></a>EventEmitter类</h2><p><code>events</code>模块只提供了一个对象：<code>events.EventEmitter</code>。<code>EventEmitter</code>的核心就是事件触发与事件监听器功能的封装。</p><p>你可以通过<code>require(&quot;events&quot;)</code>来访问该模块。</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 引入 events 模块</span><span class="token keyword">var</span> events <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'events'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 创建 eventEmitter 对象</span><span class="token keyword">var</span> eventEmitter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">events<span class="token punctuation">.</span>EventEmitter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>EventEmitter</code>对象如果在实例化时发生错误，会发生<code>error</code>事件。当添加新的监听器时，<code>newListener</code>会被触发；当监听器被移除时，<code>removeListener</code>事件会被触发。</p><h3 id="EventEmitter的用法"><a href="#EventEmitter的用法" class="headerlink" title="EventEmitter的用法"></a>EventEmitter的用法</h3><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> EventEmitter <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'events'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>EventEmitter<span class="token punctuation">;</span><span class="token keyword">var</span> event <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EventEmitter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>event<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'some_event'</span><span class="token punctuation">,</span> <span class="token function">funcion</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'some_event 事件触发'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    event<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">'some_event'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行结果如下：</p><pre class="line-numbers language-javascript"><code class="language-javascript">$ node event<span class="token punctuation">.</span>jssome_event 事件触发<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>运行这段代码，一秒后控制台输出了<code>&#39;some_event 事件触发&#39;</code>。其原理是<code>event</code>对象注册了事件<code>some_event</code>的一个监听器，然后我们通过<code>setTimeout</code>在1000毫秒以后向<code>event</code>对象发送事件<code>some_event</code>，此时会调用<code>some_event</code>的监听器。</p><p><code>EventEmitter</code>的每个事件由一个事件名和若干个参数组成，事件名是一个字符串，通常表达一定的语义。对于每个事件，<code>EventEmitter</code>支持若干个事件监听器。</p><p>当事件触发时，注册到这个事件的事件监听器被依次调用，事件参数作为回调函数参数传递。</p><p>让我们以下面的例子解释这个过程：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> events <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'events'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">var</span> emitter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">events<span class="token punctuation">.</span>EventEmitter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> emitter<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'someEvent'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>arg1<span class="token punctuation">,</span> arg2<span class="token punctuation">)</span> <span class="token punctuation">{</span>     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'listener1'</span><span class="token punctuation">,</span> arg1<span class="token punctuation">,</span> arg2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> emitter<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'someEvent'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>arg1<span class="token punctuation">,</span> arg2<span class="token punctuation">)</span> <span class="token punctuation">{</span>     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'listener2'</span><span class="token punctuation">,</span> arg1<span class="token punctuation">,</span> arg2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> emitter<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">'someEvent'</span><span class="token punctuation">,</span> <span class="token string">'arg1 参数'</span><span class="token punctuation">,</span> <span class="token string">'arg2 参数'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> 以上例子中，<code>emitter</code>为事件 <code>someEvent</code>注册了两个事件监听器，然后触发了 <code>someEvent</code>事件。</p><p>运行结果中可以看到两个事件监听器回调函数被先后调用。 这就是<code>EventEmitter</code>最简单的用法。 </p><p><code>EventEmitter</code> 提供了多个属性，如 <code>on</code>  和 <code>emit</code>。<code>on</code> 函数用于绑定事件函数，<code>emit</code> 属性用于触发一个事件。接下来我们来具体看下 <code>EventEmitter</code> 的属性介绍。</p><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><h3 id="addListener-event-listener"><a href="#addListener-event-listener" class="headerlink" title="addListener(event,listener)"></a><code>addListener(event,listener)</code></h3><p>为指定事件添加一个监听器到监听器数组的尾部。</p><h3 id="on-event-listener"><a href="#on-event-listener" class="headerlink" title="on(event,listener)"></a><code>on(event,listener)</code></h3><p>为指定事件注册一个监听器，接受一个字符串 event 和一个回调函数。</p><pre class="line-numbers language-javascript"><code class="language-javascript">server<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'connection'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>stream<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'someone connected!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="once-event-listener"><a href="#once-event-listener" class="headerlink" title="once(event,listener)"></a><code>once(event,listener)</code></h3><p>为指定事件注册一个单次监听器，即 监听器最多只会触发一次，触发后立刻解除该监听器。</p><pre class="line-numbers language-javascript"><code class="language-javascript">server<span class="token punctuation">.</span><span class="token function">once</span><span class="token punctuation">(</span><span class="token string">'connection'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>stream<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Ah, we have our first user!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="removeListener-event-listener"><a href="#removeListener-event-listener" class="headerlink" title="removeListener(event,listener)"></a><code>removeListener(event,listener)</code></h3><p>移除指定事件的某个监听器，监听器必须是该事件已经注册过的监听器。</p><p>它接受两个参数，第一个是事件名称，第二个是回调函数名称。</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> callback <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>stream<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'someone connected!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>server<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'connection'</span><span class="token punctuation">,</span>callback<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// ..</span>server<span class="token punctuation">.</span><span class="token function">removeListener</span><span class="token punctuation">(</span><span class="token string">'connection'</span><span class="token punctuation">,</span>callback<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 移除事件监听器</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="removeAllListeners-event"><a href="#removeAllListeners-event" class="headerlink" title="removeAllListeners([event])"></a><code>removeAllListeners([event])</code></h3><p>移除所有事件的所有监听器， 如果指定事件，则移除指定事件的所有监听器。</p><h3 id="setMaxListeners-n"><a href="#setMaxListeners-n" class="headerlink" title="setMaxListeners(n)"></a><code>setMaxListeners(n)</code></h3><p>默认情况下， EventEmitters 如果你添加的监听器超过 10 个就会输出警告信息。<br>setMaxListeners 函数用于提高监听器的默认限制的数量。</p><h3 id="listeners-event"><a href="#listeners-event" class="headerlink" title="listeners(event)"></a><code>listeners(event)</code></h3><p>返回指定事件的监听器数组。</p><h3 id="emit-event-arg1-arg2"><a href="#emit-event-arg1-arg2" class="headerlink" title="emit(event, [arg1], [arg2], [...])"></a><code>emit(event, [arg1], [arg2], [...])</code></h3><p>按参数的顺序执行每个监听器，如果事件有注册监听返回 true，否则返回 false。</p><hr><p>参考于 <a href="http://www.runoob.com" target="_blank" rel="noopener">www.runoob.com</a></p>]]></content>
      
      
      <categories>
          
          <category> Node.js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Node.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux git提交出现错误everything up to date的解决方法</title>
      <link href="/2019/01/03/Linux-git%E6%8F%90%E4%BA%A4%E5%87%BA%E7%8E%B0%E9%94%99%E8%AF%AFeverything-up-to-date%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"/>
      <url>/2019/01/03/Linux-git%E6%8F%90%E4%BA%A4%E5%87%BA%E7%8E%B0%E9%94%99%E8%AF%AFeverything-up-to-date%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>如果你之前没有提交过文件,而你在git push的时候出现Everything up-to-date,并且文件也没有提交上去.可能是因为你没有git add 和 git commit. </p><pre><code>git add .git commit -m &quot;test&quot;// 不添加-m 是不能直接添加message的git pull origin  mastergit push origin master</code></pre>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> 错误解决 </tag>
            
            <tag> 错误 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux Ionic配置</title>
      <link href="/2019/01/03/Linux-Ionic%E9%85%8D%E7%BD%AE/"/>
      <url>/2019/01/03/Linux-Ionic%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h2 id="查看系统版本"><a href="#查看系统版本" class="headerlink" title="查看系统版本"></a>查看系统版本</h2><pre><code>uname -a</code></pre><h2 id="查看系统位数"><a href="#查看系统位数" class="headerlink" title="查看系统位数"></a>查看系统位数</h2><pre><code>uname -m</code></pre><p>如果是x86_64就是64位，如果是i686就是32位</p><h2 id="安装nodejs"><a href="#安装nodejs" class="headerlink" title="安装nodejs"></a>安装nodejs</h2><ol><li>进入Nodejs官网下载安装包</li><li>解压安装包<pre><code>cd Downloadstar -xvf node-v10.14.2-linux-x64</code></pre></li><li>将该目录移动到通用软件目录<pre><code>sudo mv node-v10.14.2-linux-x64 /opt/</code></pre></li><li>安装 npm 和 node 命令到系统命令<pre><code>sudo ln -s /opt/node-v6.10.3-linux-x64/bin/node /usr/local/bin/node sudo ln -s /opt/node-v6.10.3-linux-x64/bin/npm /usr/local/bin/npm</code></pre></li><li>运行<code>npm -v</code>、<code>node -v</code>查看是否安装成功</li></ol><h2 id="搭建JAVA环境"><a href="#搭建JAVA环境" class="headerlink" title="搭建JAVA环境"></a>搭建JAVA环境</h2><ol><li>下载<a href="https://download.oracle.com/otn-pub/java/jdk/8u191-b12/2787e4a523244c269598db4e85c51e0c/jdk-8u191-linux-x64.tar.gz" target="_blank" rel="noopener">jdk-8u191-linux-x64.tar.gz</a></li><li>解压<pre><code>tar -zxvf jdk-8u191-linux-x64.tar.gz</code></pre></li><li>移动到opt目录下<pre><code>sudo mv jdk1.8.0_191 /opt/</code></pre></li></ol><h2 id="搭建ANDROID环境"><a href="#搭建ANDROID环境" class="headerlink" title="搭建ANDROID环境"></a>搭建ANDROID环境</h2><ol><li>下载<a href="http://tools.android-studio.org/index.php/sdk/" target="_blank" rel="noopener">android-sdk_r24.4.1-linux.tgz</a></li><li>解压<pre><code>tar -zxvf android-sdk_r24.4.1-linux.tgz</code></pre></li><li>移动到opt<pre><code>sudo mv android -sdk-linux /opt</code></pre></li><li>更新（会获取到目前所有的安卓版本，文件会有点大）<pre><code>android-sdk-linux/tools/android update sdk --no-ui</code></pre></li></ol><h2 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h2><ol><li>编辑profile文件<pre><code>sudo vim /etc/profile</code></pre></li><li>在profile文件后加入如下代码<pre><code>export JAVA_HOME=/opt/java/jdk1.8.0_191export ANDROID_HOME=/opt/android-sdk-linuxexport PATH=$JAVA_HOME/bin:$ANDROID_HOME/tools:$ANDROID_HOME/platform-tools:$PATH</code></pre></li></ol><h2 id="安装cordova-ionic"><a href="#安装cordova-ionic" class="headerlink" title="安装cordova ionic"></a>安装cordova ionic</h2><pre><code>npm install -g cordova ionic</code></pre><p>完成后运行<code>cordova</code>、<code>ionic</code>查看是否安装成功<br>如果安装太慢，可以设置淘宝镜像安装，或是使用cnpm安装</p><pre><code>npm config set registry https://registry.npm.taobao.org</code></pre>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> Ionic </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> ionic </tag>
            
            <tag> 配置 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS渐变与变形处理</title>
      <link href="/2019/01/03/%E6%B8%90%E5%8F%98%E4%B8%8E%E5%8F%98%E5%BD%A2%E5%A4%84%E7%90%86/"/>
      <url>/2019/01/03/%E6%B8%90%E5%8F%98%E4%B8%8E%E5%8F%98%E5%BD%A2%E5%A4%84%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h1 id="渐变与变形处理"><a href="#渐变与变形处理" class="headerlink" title="渐变与变形处理"></a>渐变与变形处理</h1><p>[TOC]</p><h2 id="渐变效果"><a href="#渐变效果" class="headerlink" title="渐变效果"></a>渐变效果</h2><p>网页中的渐变效果包括渐变背景、渐变导航、渐变按钮等</p><p><strong>CSS3渐变分类</strong></p><p>线性渐变，径向渐变</p><p><strong>CSS3渐变优点</strong></p><p>代替使用图像来实现效果，可以减少下载的时间和宽带的使用。</p><p>由浏览器生成，在放大时看起来效果更好。</p><h3 id="线性渐变"><a href="#线性渐变" class="headerlink" title="线性渐变"></a>线性渐变</h3><p>语法：<code>background: linear-gradient(direction,color-stop1,color-stop2,...)</code></p><p>在一条直线上进行颜色渐变，渐变线由包含渐变图形的容器的中心点和一个角度来定义的。</p><p><code>linear-gradient()</code> 函数创建一个没有内在尺寸的，表示颜色线性渐变的<code>&lt;image&gt;</code> 图像；它既不具有固有的或首选的尺寸，也不具有比率。它的具体尺寸将与其适用的元素尺寸匹配。</p><p>第一个参数：指定渐变方向，可以用<strong>角度</strong>或<strong>英文关键词</strong>来表示。</p><p>第一个参数省略时，默认为<strong>180edg</strong>，等同于<strong>to bottom</strong></p><p>第二个和第三个参数，表示颜色的开始点和结束点，可以有多个颜色值。</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style language-css">    <span class="token selector"><span class="token class">.div1</span></span><span class="token punctuation">{</span>        <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">linear-gradient</span><span class="token punctuation">(</span>to bottom left,red <span class="token number">20%</span>,yellow <span class="token number">40%</span>,green<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/*            前20%红色，20%~40%黄色，剩下的绿色        */</span>    <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="重复的线性渐变"><a href="#重复的线性渐变" class="headerlink" title="重复的线性渐变"></a>重复的线性渐变</h3><p>语法： <code>repeating-linear-gradient()</code></p><h4 id="切角效果"><a href="#切角效果" class="headerlink" title="切角效果"></a>切角效果</h4><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">    <span class="token selector"><span class="token class">.div1</span></span><span class="token punctuation">{</span>        <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>        <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>        <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">linear-gradient</span><span class="token punctuation">(</span><span class="token number">45</span>deg,transparent <span class="token number">20</span>px, lightgreen <span class="token number">0</span>px<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>div1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2019/01/03/渐变与变形处理/C:/Users\dell\Desktop\markdown\imgs\切角效果.png" alt="切角效果"></p><h4 id="渐变按钮"><a href="#渐变按钮" class="headerlink" title="渐变按钮"></a>渐变按钮</h4><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">    <span class="token selector">a</span><span class="token punctuation">{</span>        <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">10</span>px <span class="token number">15</span>px<span class="token punctuation">;</span>        <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">6</span>px<span class="token punctuation">;</span>        <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#623f1d</span><span class="token punctuation">;</span>        <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">18</span>px <span class="token punctuation">;</span>        <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">linear-gradient</span><span class="token punctuation">(</span>to top, <span class="token hexcode">#ffce63</span>, <span class="token hexcode">#fcaa35</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector">a<span class="token pseudo-class">:hover</span></span><span class="token punctuation">{</span>        <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">linear-gradient</span><span class="token punctuation">(</span>to top, <span class="token hexcode">#fcaa35</span>,<span class="token hexcode">#ffce63</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>渐变按钮<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="径向渐变"><a href="#径向渐变" class="headerlink" title="径向渐变"></a>径向渐变</h3><p>是一种从起点到终点颜色从内到外进行圆形渐变（从中间向外拉，像圆一样）。在径向渐变中没有设置位置时，其默认颜色为均匀间隔，设置了渐变位置就会按照渐变位置去渐变。</p><p>语法：<code>background: radial-gradient(shape at position,color1-stop,color2-stop,...)</code></p><h4 id="shape"><a href="#shape" class="headerlink" title="shape"></a><code>shape</code></h4><ul><li><code>circle</code>——定义渐变为<strong>圆形</strong></li><li><code>ellipse</code>——定义渐变为<strong>椭圆形</strong></li></ul><h4 id="position"><a href="#position" class="headerlink" title="position"></a><code>position</code></h4><ul><li>长度值 px（可负）</li><li>百分比 %（可负）</li></ul><pre class="line-numbers language-css"><code class="language-css"><span class="token selector"><span class="token class">.div1</span></span><span class="token punctuation">{</span>    <span class="token property">background</span><span class="token punctuation">:</span><span class="token function">radial-gradient</span><span class="token punctuation">(</span><span class="token number">50%50%</span>,red <span class="token number">0%</span>,yellow <span class="token number">20%</span>,black <span class="token number">50%</span>,green <span class="token number">80%</span>,yellow<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.div3</span></span><span class="token punctuation">{</span>    <span class="token property">background</span><span class="token punctuation">:</span><span class="token function">radial-gradient</span><span class="token punctuation">(</span>circleat topleft, red <span class="token number">0%</span>,yellow <span class="token number">20%</span>,black <span class="token number">50%</span>,green <span class="token number">80%</span>,yellow<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="CSS3变形"><a href="#CSS3变形" class="headerlink" title="CSS3变形"></a>CSS3变形</h2><p>在CSS3中提供了<code>transform</code>和<code>transform-origin</code>两个用于实现2D变换的属性。</p><p><code>transform</code>属性用于实现平移、缩放、旋转和倾斜等2D变换。</p><p><code>transform-origin</code>属性则是用于设置变换的中心点的。</p><h3 id="transform"><a href="#transform" class="headerlink" title="transform"></a><code>transform</code></h3><p><code>transform</code>属性向元素应用2D或3D转换。通过转换能够对元素进行旋转、缩放、移动、倾斜或拉伸。</p><p>Chrome和Safari需要前缀<code>-webkit-</code></p><p>Firefox需要前缀<code>-moz-</code></p><p>Opera需要前缀<code>-o-</code></p><p>IE9需要前缀<code>-ms-</code></p><p>语法： <code>transform: none | transform-functions</code></p><p><code>transform</code>属性的属性值由值及函数组成。</p><h4 id="移动——translate-方法"><a href="#移动——translate-方法" class="headerlink" title="移动——translate()方法"></a>移动——<code>translate()</code>方法</h4><p><code>translate()</code>方法能够<strong>重新定位</strong>元素的坐标。</p><ul><li><code>translateX(x)</code>：元素仅在水平方向移动;</li><li><code>translateY(y)</code>：元素仅在垂直方向移动;</li><li><code>translate(x,y)</code>：元素在水平和垂直方向同时移动;</li></ul><p>实例：</p><p><img src="/2019/01/03/渐变与变形处理/C:/Users\dell\Desktop\Notes\imgs\translate(" alt="translate()">.png)</p><pre class="line-numbers language-html"><code class="language-html"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style language-css">        <span class="token selector"><span class="token class">.test</span> ul </span><span class="token punctuation">{</span> <span class="token property">list-style</span><span class="token punctuation">:</span>none<span class="token punctuation">;</span> <span class="token punctuation">}</span>        <span class="token selector"><span class="token class">.test</span> li </span><span class="token punctuation">{</span>            <span class="token property">float</span><span class="token punctuation">:</span>left<span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span><span class="token number">100</span>px<span class="token punctuation">;</span>            <span class="token property">background</span><span class="token punctuation">:</span><span class="token hexcode">#CCC</span><span class="token punctuation">;</span>            <span class="token property">margin-left</span><span class="token punctuation">:</span><span class="token number">3</span>px<span class="token punctuation">;</span>            <span class="token property">line-height</span><span class="token punctuation">:</span><span class="token number">30</span>px<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector"><span class="token class">.test</span> a </span><span class="token punctuation">{</span>            <span class="token property">display</span><span class="token punctuation">:</span>block<span class="token punctuation">;</span>            <span class="token property">text-align</span><span class="token punctuation">:</span>center<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span><span class="token number">30</span>px<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector"><span class="token class">.test</span> a<span class="token pseudo-class">:link</span></span><span class="token punctuation">{</span>            <span class="token property">text-decoration</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>            <span class="token property">color</span><span class="token punctuation">:</span> white<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector"><span class="token class">.test</span> a<span class="token pseudo-class">:hover</span> </span><span class="token punctuation">{</span>            <span class="token property">color</span><span class="token punctuation">:</span><span class="token hexcode">#fff</span><span class="token punctuation">;</span>            <span class="token property">font-weight</span><span class="token punctuation">:</span> bold<span class="token punctuation">;</span>            <span class="token property">background</span><span class="token punctuation">:</span><span class="token url">url(images/icon2.jpg)</span> red no-repeat <span class="token number">5</span>px <span class="token number">12</span>px<span class="token punctuation">;</span>            <span class="token property">text-decoration</span><span class="token punctuation">:</span>none<span class="token punctuation">;</span>            <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span>-<span class="token number">4</span>px,-<span class="token number">4</span>px<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector"><span class="token class">.test</span> a<span class="token pseudo-class">:visited</span> </span><span class="token punctuation">{</span>            <span class="token property">color</span><span class="token punctuation">:</span><span class="token hexcode">#666</span><span class="token punctuation">;</span>            <span class="token property">text-decoration</span><span class="token punctuation">:</span>underline<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>test<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>首页<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>新闻<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>论坛<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>4<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>博客<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>5<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>团购<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>6<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>微博<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="旋转——rotate-方法"><a href="#旋转——rotate-方法" class="headerlink" title="旋转——rotate()方法"></a>旋转——<code>rotate()</code>方法</h4><p><code>rotate()</code>方法能够相对中心原点<strong>旋转</strong>指定的元素。</p><p>语法：<code>transform: rotate(angle)</code></p><p>正角度为顺时针旋转元素</p><p>负角度为逆时针旋转元素</p><h4 id="缩放——scale-方法"><a href="#缩放——scale-方法" class="headerlink" title="缩放——scale()方法"></a>缩放——<code>scale()</code>方法</h4><p><code>scale()</code>方法能够实现文字或图像根据中心原点进行缩放</p><ul><li><code>scaleX(x)</code></li><li><code>scaleY(y)</code></li><li><code>scale(x,y)</code></li></ul><p>绝对值大于1，代表放大。</p><p>绝对值小于1，代表缩小。</p><p>绝对值等于1，不缩放。</p><p>当值为负数时对象反转。</p><h4 id="倾斜——skew-方法"><a href="#倾斜——skew-方法" class="headerlink" title="倾斜——skew()方法"></a>倾斜——<code>skew()</code>方法</h4><p><code>skew()</code>方法能够<strong>倾斜</strong>指定元素。</p><p><code>skewX(x)</code></p><p><code>skewY(y)</code></p><p><code>skew(x,y)</code>：元素水平方向和垂直方向同时倾斜；如果第二个参数为空，则默认为0，参数为负表示向相反方向倾斜。</p><h4 id="3D变形"><a href="#3D变形" class="headerlink" title="3D变形"></a>3D变形</h4><p>CSS3允许使用3D转换来实现元素在X轴、Y轴、Z轴方向上的变形处理。</p><h5 id="3D旋转"><a href="#3D旋转" class="headerlink" title="3D旋转"></a>3D旋转</h5><p><code>roteteX(angle)</code>、<code>rotateY(angle)</code>、<code>rotateZ(angle)</code></p><h3 id="transform-origin"><a href="#transform-origin" class="headerlink" title="transform-origin"></a><code>transform-origin</code></h3><p><code>transform-origin</code>属性更改变换的基点位置。</p><p>语法<code>transform: x-axis y-axis</code></p><p>默认情况下，元素基点位置为元素的中心点，即X轴和Y轴的<strong>50%</strong>处。</p><p>CSS3变形进行的位移、缩放、旋转、倾斜都是以元素的基点进行变形。</p><h3 id="多重变形"><a href="#多重变形" class="headerlink" title="多重变形"></a>多重变形</h3><p>对同一元素可添加多种变形效果</p><p><code>transform: translate(150px,200px) rotate(120deg) scale(1.5,1.5)</code></p><h2 id="实例——照片墙"><a href="#实例——照片墙" class="headerlink" title="实例——照片墙"></a>实例——照片墙</h2><p>使用纯HTML和CSS实现照片墙效果。</p><p>照片随意排列，鼠标经过时照片正放并放大。</p>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
            <tag> 样式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>背景与边框</title>
      <link href="/2019/01/03/%E8%83%8C%E6%99%AF%E4%B8%8E%E8%BE%B9%E6%A1%86/"/>
      <url>/2019/01/03/%E8%83%8C%E6%99%AF%E4%B8%8E%E8%BE%B9%E6%A1%86/</url>
      
        <content type="html"><![CDATA[<h1 id="背景与边框"><a href="#背景与边框" class="headerlink" title="背景与边框"></a>背景与边框</h1><p>[TOC]</p><h2 id="背景样式"><a href="#背景样式" class="headerlink" title="背景样式"></a>背景样式</h2><p>CSS3包含了多个新的背景属性，提供了对背景更强大的控制</p><ul><li>background-size</li><li>background-origin</li><li>background-clip</li><li>使用多重背景图片</li></ul><h3 id="background-size"><a href="#background-size" class="headerlink" title="background-size"></a>background-size</h3><p>规定背景图片的尺寸</p><p>语法： <code>background-size:length | percentage | cover | contain</code></p><table><thead><tr><th style="text-align:center">值</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">length</td><td style="text-align:center">以浮点数字和单位组成的长度值来设置背景图的高度和宽度。如果只设置一个值，第二个值会被设置成auto。</td></tr><tr><td style="text-align:center">percentage</td><td style="text-align:center">以父元素的百分比来设置背景图的高度和宽度。如果只设置一个值，第二个值会被设置成auto。</td></tr><tr><td style="text-align:center">cover</td><td style="text-align:center">保持背景图本身宽高比例。将图片缩放到<strong>正好完全覆盖</strong>所定义背景的区域。</td></tr><tr><td style="text-align:center">contain</td><td style="text-align:center">保持背景图本身宽高比例。将图片缩放到<strong>宽度和高度正好适应</strong>所定义背景的区域。</td></tr></tbody></table><p>重置背景图像</p><pre class="line-numbers language-css"><code class="language-css"><span class="token selector"><span class="token class">.div1</span></span><span class="token punctuation">{</span>    <span class="token property">background</span><span class="token punctuation">:</span> <span class="token url">url(flwr.gif)</span><span class="token punctuation">;</span>    <span class="token property">background-size</span><span class="token punctuation">:</span> <span class="token number">80</span>px <span class="token number">80</span>px<span class="token punctuation">;</span>    <span class="token property">background-repeat</span><span class="token punctuation">:</span> no-repeat<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.div2</span></span><span class="token punctuation">{</span>    <span class="token property">background</span><span class="token punctuation">:</span> <span class="token url">url(flwr.gif)</span><span class="token punctuation">;</span>    <span class="token property">background-size</span><span class="token punctuation">:</span> <span class="token number">100%</span> <span class="token number">100%</span><span class="token punctuation">;</span>    <span class="token property">background-repeat</span><span class="token punctuation">:</span> no-repeat<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="background-origin"><a href="#background-origin" class="headerlink" title="background-origin"></a>background-origin</h3><p>规定背景图片的定位区域(background-position的参考位置)</p><p>语法： <code>background-origin: border-box | padding-box | content-box</code></p><table><thead><tr><th style="text-align:center">值</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">border-box</td><td style="text-align:center">从补白区域开始显示背景。</td></tr><tr><td style="text-align:center">padding-box</td><td style="text-align:center">从边框区域开始显示背景</td></tr><tr><td style="text-align:center">content-box</td><td style="text-align:center">仅在内容区域显示背景</td></tr></tbody></table><p><img src="/2019/01/03/背景与边框/C:/Users\dell\Desktop\Notes\imgs\background-origin.png" alt="background-origin"></p><h3 id="CSS3多个背景图像"><a href="#CSS3多个背景图像" class="headerlink" title="CSS3多个背景图像"></a>CSS3多个背景图像</h3><p>CSS3允许给元素添加多个背景图像</p><pre class="line-numbers language-css"><code class="language-css"><span class="token selector">body</span><span class="token punctuation">{</span>    <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token url">url(flwr.gif)</span>, <span class="token url">url(tree.gif)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol><li>利用<strong>逗号</strong>作为分隔符来同时指定多个属性值</li><li>设置多个背景图像时，注意图像的叠放顺序<strong>（第一个图像放在最上面，最后指定的文件放在最下面）</strong></li></ol><h3 id="background-clip"><a href="#background-clip" class="headerlink" title="background-clip"></a>background-clip</h3><p>规定背景的绘制区域(决定背景在哪些区域显示)</p><p>语法：<code>background-clip: border-box | padding-box |content-box</code></p><h3 id="background-origin和background-clip"><a href="#background-origin和background-clip" class="headerlink" title="background-origin和background-clip"></a>background-origin和background-clip</h3><p><code>background-clip: border | padding | content</code></p><p>指定背景在哪些区域可以显示，但与背景开始绘制的位置无关。背景的绘制的位置可以出现在不显示背景的区域，这时就相当于背景图片被不显示背景的区域裁剪了一部分。</p><p><code>background-origin: border | pdding | content</code></p><p>指定背景从哪个区域（边框、补白或内容）开始绘制。可以用此属性在边框上绘制背景，但边框上的背景能不能显示出来就要由<code>background-clip</code>来决定了。</p><h2 id="CSS3边框"><a href="#CSS3边框" class="headerlink" title="CSS3边框"></a>CSS3边框</h2><p>通过CSS3能够创建圆角边框，向矩形添加阴影，使用图片来绘制边框。并且不需使用设计软件，比如PhotoShop。</p><h3 id="圆角边框"><a href="#圆角边框" class="headerlink" title="圆角边框"></a>圆角边框</h3><p>语法： <code>border-radius: 1-4 length | %</code></p><p><code>border-radius</code>属性可以包含两个参数值，第一个值表示圆角的水平半径，第二个值表示圆角的垂直半径，两个参数通过斜线分隔。如果仅包含一个参数值，表示两个数值相同，即1/4圆角。</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style language-css">    <span class="token selector">div</span><span class="token punctuation">{</span>        <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">5</span>px solid blue<span class="token punctuation">;</span>        <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">20</span>px<span class="token punctuation">;</span>        <span class="token property">background-color</span><span class="token punctuation">:</span> skyblue<span class="token punctuation">;</span>        <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">20</span>px<span class="token punctuation">;</span>        <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">180</span>px<span class="token punctuation">;</span>    <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        Hello World!    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果要绘制的圆角边框四个角的半径互不相同时，需按左上角、右上角、右下角、左下角的顺序设置每个方向圆角的半径值</p><p><code>border-top-left-radius</code>  <code>border-top-right-radius</code></p><p><code>border-bottom-left-radius</code> <code>border-bottom-right-radius</code></p><h3 id="图像边框"><a href="#图像边框" class="headerlink" title="图像边框"></a>图像边框</h3><p><code>border-image</code>可以让元素的宽度或长度处于随时变化的边框统一使用一个图像文件进行绘制。</p><p>语法：<code>border-image: url(图像文件的路径) A B C D</code></p><p>A B C D 四个参数表示浏览器自动把图像分隔时的上边距、右边距、下边距以及左边距</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">    <span class="token selector">div</span><span class="token punctuation">{</span>        <span class="token property">border</span><span class="token punctuation">:</span> solid <span class="token number">5</span>px<span class="token punctuation">;</span>        <span class="token property">border-image</span><span class="token punctuation">:</span> <span class="token url">url(border.png)</span> <span class="token number">18</span> <span class="token number">18</span> <span class="token number">18</span> <span class="token number">18</span><span class="token punctuation">;</span>        <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>    <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        Hello World!    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="阴影"><a href="#阴影" class="headerlink" title="阴影"></a>阴影</h2><h3 id="向框添加一个或多个阴影——box-shadow属性"><a href="#向框添加一个或多个阴影——box-shadow属性" class="headerlink" title="向框添加一个或多个阴影——box shadow属性"></a>向框添加一个或多个阴影——<code>box shadow</code>属性</h3><p>语法：<code>box-shadow: h-shadow v-shadow blur spread color inset</code></p><table><thead><tr><th style="text-align:center">值</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">h-shdow</td><td style="text-align:center">必需，水平阴影的位置。允许负值。</td></tr><tr><td style="text-align:center">v-shadow</td><td style="text-align:center">必需，垂直阴影的位置。允许负值。</td></tr><tr><td style="text-align:center">blur</td><td style="text-align:center">可选，模糊距离。</td></tr><tr><td style="text-align:center">spread</td><td style="text-align:center">可选，阴影的尺寸。</td></tr><tr><td style="text-align:center">color</td><td style="text-align:center">可选，阴影的颜色。</td></tr><tr><td style="text-align:center">inset</td><td style="text-align:center">可选，将外部阴影改为内部阴影。</td></tr></tbody></table><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">    <span class="token selector">img</span><span class="token punctuation">{</span>        <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">300</span>px<span class="token punctuation">;</span>        <span class="token property">border-shadow</span><span class="token punctuation">:</span> <span class="token number">5</span>px <span class="token number">5</span>px<span class="token punctuation">;</span>    <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
            <tag> 样式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS动画</title>
      <link href="/2019/01/03/CSS%E5%8A%A8%E7%94%BB/"/>
      <url>/2019/01/03/CSS%E5%8A%A8%E7%94%BB/</url>
      
        <content type="html"><![CDATA[<h1 id="CSS动画"><a href="#CSS动画" class="headerlink" title="CSS动画"></a>CSS动画</h1><p>[TOC]</p><h2 id="过渡"><a href="#过渡" class="headerlink" title="过渡"></a>过渡</h2><h3 id="transition"><a href="#transition" class="headerlink" title="transition"></a><code>transition</code></h3><p>CSS3中<code>transform</code>属性所实现的元素变形，呈现的仅仅是一个结果。而<code>transition</code>实现的是一种过渡，即一种动画转换过程，如渐显，渐隐，动画快慢等。</p><p><code>transition</code>通过将一个元素<strong>从一个属性值</strong>在指定的时间内平滑地过渡到<strong>另一个属性值</strong>来实现动画功能。</p><h4 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h4><table><thead><tr><th style="text-align:center">值</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">transition-property</td><td style="text-align:center">规定设置过渡效果的CSS属性名称。</td></tr><tr><td style="text-align:center">transition-duration</td><td style="text-align:center">规定完成过渡效果需要的时间。默认是0。</td></tr><tr><td style="text-align:center">transition-timing-function</td><td style="text-align:center">规定过渡效果的时间曲线。默认是 ease</td></tr><tr><td style="text-align:center">transition-delay</td><td style="text-align:center">规定过渡效果从何时开始。默认是0。</td></tr></tbody></table><h4 id="定义过渡属性-transition-property"><a href="#定义过渡属性-transition-property" class="headerlink" title="定义过渡属性 transition-property"></a>定义过渡属性 <code>transition-property</code></h4><p>指定参与过渡的属性。</p><p>语法：</p><pre class="line-numbers language-css"><code class="language-css"><span class="token property">transition-property</span><span class="token punctuation">:</span> all | none | &lt;property>[ ,&lt;property> ] *<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>all</code>：默认值，表示所有可以进行过渡的CSS属性。</p><p><code>none</code>：表示不进行过渡的CSS属性。</p><p><code>&lt;property&gt;</code>：表示指定要进行过渡的CSS属性，可以同时指定多个属性值，用 “ , “  分隔。</p><p>示例：</p><pre class="line-numbers language-css"><code class="language-css"><span class="token selector">div</span><span class="token punctuation">{</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token hexcode">#ffff00</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">div<span class="token pseudo-class">:hover</span></span><span class="token punctuation">{</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token hexcode">#ff0000</span><span class="token punctuation">;</span>    <span class="token property">transition-property</span><span class="token punctuation">:</span> background-color<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="定义过渡时间-transition-duration"><a href="#定义过渡时间-transition-duration" class="headerlink" title="定义过渡时间 transition-duration"></a>定义过渡时间 <code>transition-duration</code></h4><p>指定过渡持续的时间，即设置从旧属性换到新属性花费的时间（以秒或毫秒计）。</p><p>语法：</p><pre class="line-numbers language-css"><code class="language-css"><span class="token property">transition-duration</span><span class="token punctuation">:</span> &lt;time>[,&lt;time>]*<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>time</code>：默认值为0，适用于所有元素以及<code>:before</code>、<code>:after</code>伪元素，如果存在多个属性值，用 “ , “ 分隔。</p><h4 id="定义过渡延迟时间transition-delay"><a href="#定义过渡延迟时间transition-delay" class="headerlink" title="定义过渡延迟时间transition-delay"></a>定义过渡延迟时间<code>transition-delay</code></h4><p>规定在过渡效果开始之前需要等待的时间，以秒或毫秒计。</p><p>语法：</p><pre class="line-numbers language-css"><code class="language-css"><span class="token property">transition-delay</span><span class="token punctuation">:</span> time<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>time</code>：默认值为0，适用于适用于所有元素以及<code>:before</code>、<code>:after</code>伪元素。</p><p>设置时间可以为正整数、负整数和0。非零时必须设置单位为秒s或者毫秒ms。为负数时过渡的动作会从该时间点开始显示，之前的动作被截断；为正数的时候，过渡的动作会延迟触发。</p><h4 id="定义过渡效果"><a href="#定义过渡效果" class="headerlink" title="定义过渡效果"></a>定义过渡效果</h4><p>规定过渡效果的速度曲线。</p><p>语法：</p><pre class="line-numbers language-css"><code class="language-css"><span class="token property">transition-timing-function</span><span class="token punctuation">:</span> linear | ease | ease-in | ease-out | ease-in-out | <span class="token function">cubic-bezier</span><span class="token punctuation">(</span>x<span class="token number">1</span>,y<span class="token number">1</span>,x<span class="token number">2</span>,y<span class="token number">2</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>linear</code>：线性效果（速度不变）</p><p><code>ease</code>：缓解效果（慢—快—慢）</p><p><code>ease-in</code>：渐显效果（慢—快）</p><p><code>ease-out</code>：渐隐效果（快—慢）</p><h4 id="合写方式"><a href="#合写方式" class="headerlink" title="合写方式"></a>合写方式</h4><pre class="line-numbers language-css"><code class="language-css"><span class="token property">transition</span><span class="token punctuation">:</span> all <span class="token number">.5</span>s ease-in <span class="token number">1</span>s<span class="token comment" spellcheck="true">/* 分写方式 */</span><span class="token property">transition-property</span><span class="token punctuation">:</span> all,<span class="token property">transition-duration</span><span class="token punctuation">:</span> <span class="token number">.5</span>s,<span class="token property">transition-timing-function</span><span class="token punctuation">:</span> ease-in,<span class="token property">transition-delay</span><span class="token punctuation">:</span> <span class="token number">1</span>s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
            <tag> 动画 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS3概述</title>
      <link href="/2019/01/03/CSS3%E6%A6%82%E8%BF%B0/"/>
      <url>/2019/01/03/CSS3%E6%A6%82%E8%BF%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="CSS3概述"><a href="#CSS3概述" class="headerlink" title="CSS3概述"></a>CSS3概述</h1><p>[TOC]</p><p>CSS用于控制网页的样式和布局</p><p><strong>CSS3是最新的CSS标准</strong></p><h2 id="CSS发展史"><a href="#CSS发展史" class="headerlink" title="CSS发展史"></a>CSS发展史</h2><h3 id="CSS1"><a href="#CSS1" class="headerlink" title="CSS1"></a>CSS1</h3><p>包含了<code>font</code>的相关属性，字体、颜色、补白、基本选择器</p><h3 id="CSS2"><a href="#CSS2" class="headerlink" title="CSS2"></a>CSS2</h3><p>在这个版本中开始使用样式表结构。浮动和定位、高级选择器（子选择器，相邻选择器，通用选择器）</p><h3 id="CSS3"><a href="#CSS3" class="headerlink" title="CSS3"></a>CSS3</h3><p>遵循模块化开发，把很多以前需要使用图片和脚本来实现的效果，只需要短短几行代码就能搞定。CSS发展史。</p><h2 id="CSS3的新特性"><a href="#CSS3的新特性" class="headerlink" title="CSS3的新特性"></a>CSS3的新特性</h2><h3 id="功能强大的选择器"><a href="#功能强大的选择器" class="headerlink" title="功能强大的选择器"></a>功能强大的选择器</h3><p>允许在标签中指定特定的HTML元素而不必使用多余的类、ID或者JavaScript脚本。避免在标签中添加大量的class和id属性。</p><h3 id="新的颜色制式和透明设定"><a href="#新的颜色制式和透明设定" class="headerlink" title="新的颜色制式和透明设定"></a>新的颜色制式和透明设定</h3><p>RGBA和HSLA不仅可以设定色彩，还能设定元素的透明度。另外，还可以使用opacity属性定义元素的不透明度。</p><h3 id="多栏布局"><a href="#多栏布局" class="headerlink" title="多栏布局"></a>多栏布局</h3><p>不必使用多个div标签就能实现多栏布局。浏览器能解释多栏布局属性并生成多栏，让文本实现纸质报纸的多栏结构。</p><h3 id="多背景图"><a href="#多背景图" class="headerlink" title="多背景图"></a>多背景图</h3><p>CSS3允许背景属性设置多个属性值，如<code>background-size</code>、<code>background-position</code>、<code>background-originand</code>、<code>background-clip</code>等，这样就可以在一个元素上添加多层背景图片。设计复杂的网页效果（如圆角、背景重叠等），不需再为文档添加多个无用的标签。</p><h3 id="文字阴影"><a href="#文字阴影" class="headerlink" title="文字阴影"></a>文字阴影</h3><p>CSS3采用并重新定义了<code>text-shadow</code>属性。该属性提供了一种新的跨浏览器的方案使文字看起来更醒目。</p><h3 id="开放字体类型"><a href="#开放字体类型" class="headerlink" title="开放字体类型"></a>开放字体类型</h3><p><code>@font-face</code>是最被期待的CSS3特性之一，但是它在网站上仍然没有被广泛普及，这主要受阻于字体授权和版权问题，潜入的字体很容易从网站上下载到，这是字体厂商的主要顾虑。</p><h3 id="圆角"><a href="#圆角" class="headerlink" title="圆角"></a>圆角</h3><p><code>border-radius</code>属性可以实现不使用背景图片也能给HTML元素添加圆角。是现在使用的最多的CSS3属性之一，因为使用圆角比较美观，而且不会与设计和可用性产生冲突。</p><h3 id="边框图片"><a href="#边框图片" class="headerlink" title="边框图片"></a>边框图片</h3><p><code>border-image</code>属性允许在元素的边框上设定图片，丰富了边框样式。</p><h3 id="盒子阴影"><a href="#盒子阴影" class="headerlink" title="盒子阴影"></a>盒子阴影</h3><p><code>box-shadow</code>属性可以为HTML元素添加阴影而不需要使用额外的标签或背景图片。</p><h3 id="媒体查询"><a href="#媒体查询" class="headerlink" title="媒体查询"></a>媒体查询</h3><p><code>Media Queries</code>模块中允许添加媒体查询表达式，用以指定媒体类型，然后根据媒体类型来选择应该使用的样式。即允许在不改变内容的情况下在样式表中选择一种页面的布局以适应不同的设备，改善用户体验。</p><h2 id="CSS3与浏览器"><a href="#CSS3与浏览器" class="headerlink" title="CSS3与浏览器"></a>CSS3与浏览器</h2><p>Firefox的替代用法：<code>-moz-</code></p><p>Chrome和Safari的替代用法：<code>-webkit-</code></p><p>IE的替代用法<code>-ms-</code></p><pre class="line-numbers language-css"><code class="language-css"><span class="token selector">div</span><span class="token punctuation">{</span>    <span class="token property">appearance</span><span class="token punctuation">:</span> button<span class="token punctuation">;</span>    <span class="token property">-moz-appearance</span><span class="token punctuation">:</span> button<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 火狐的用法 */</span>    <span class="token property">-webkit-appearance</span><span class="token punctuation">:</span> button<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* Chrome和Safari的用法 */</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* 使div看上去像一个button */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="CSS3选择器"><a href="#CSS3选择器" class="headerlink" title="CSS3选择器"></a>CSS3选择器</h2><p>在CSS3中，选择器是一种模式，用于选择需要添加样式的元素。一下是CSS3版本中定义的，即：</p><ul><li>属性选择器</li><li>兄弟选择器</li><li>伪类选择器</li></ul><h3 id="属性选择器"><a href="#属性选择器" class="headerlink" title="属性选择器"></a>属性选择器</h3><p>在CSS3中，增加了如下的三个属性选择器，使得属性选择器有了通配符的概念。</p><pre class="line-numbers language-css"><code class="language-css">E[att^ = <span class="token string">"val"</span>]E[att$ = <span class="token string">"val"</span>]E[att* = <span class="token string">"val"</span>]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>E选择符可以省略，表示匹配任意类型的元素</strong></p><h4 id="E-att-quot-val-quot-选择器"><a href="#E-att-quot-val-quot-选择器" class="headerlink" title="E[att^ = &quot;val&quot;]选择器"></a><code>E[att^ = &quot;val&quot;]</code>选择器</h4><p>选择名称为E的标记，且该标记定义了<code>att</code>属性，<code>att</code>属性值是以<code>val</code><strong>开头</strong>的字符串。如果省略E则表示可以匹配满足条件的任意元素。</p><pre class="line-numbers language-css"><code class="language-css"><span class="token selector"><span class="token attribute">[id^ = "sub"]</span></span><span class="token punctuation">{</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">rgb</span><span class="token punctuation">(</span><span class="token number">129</span>,<span class="token number">26</span>,<span class="token number">91</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* 选择id是sub开头的 */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="E-att-quot-val-quot-选择器-1"><a href="#E-att-quot-val-quot-选择器-1" class="headerlink" title="E[att$ = &quot;val&quot;]选择器"></a><code>E[att$ = &quot;val&quot;]</code>选择器</h4><p>选择名称为E的标记，且该标记定义了<code>att</code>属性，<code>att</code>属性值是以<code>val</code><strong>结尾</strong>的字符串。如果省略E则表示可以匹配满足条件的任意元素。</p><pre class="line-numbers language-css"><code class="language-css"><span class="token selector"><span class="token attribute">[id$ = "sub"]</span></span><span class="token punctuation">{</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">rgb</span><span class="token punctuation">(</span><span class="token number">129</span>,<span class="token number">26</span>,<span class="token number">91</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* 选择id是sub结尾的 */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="E-att-quot-val-quot-选择器-2"><a href="#E-att-quot-val-quot-选择器-2" class="headerlink" title="E[att* = &quot;val&quot;]选择器"></a><code>E[att* = &quot;val&quot;]</code>选择器</h4><p>选择名称为E的标记，且该标记定义了<code>att</code>属性，<code>att</code>属性值是包含<code>val</code>的字符串。如果省略E则表示可以匹配满足条件的任意元素。</p><pre class="line-numbers language-css"><code class="language-css"><span class="token selector"><span class="token attribute">[id* = "sub"]</span></span><span class="token punctuation">{</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">rgb</span><span class="token punctuation">(</span><span class="token number">129</span>,<span class="token number">26</span>,<span class="token number">91</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* 选择id包含val的 */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="兄弟选择器"><a href="#兄弟选择器" class="headerlink" title="兄弟选择器"></a>兄弟选择器</h3><h4 id="element1-element2"><a href="#element1-element2" class="headerlink" title="element1 ~ element2"></a><code>element1 ~ element2</code></h4><p>使用<code>~</code>来连接前后两个选择器。选择器中的两个元素有同一个父亲，但第二个元素不必紧跟第一个元素。即找到<code>element1</code>后面能匹配<code>element2</code>的兄弟节点</p><pre class="line-numbers language-css"><code class="language-css"><span class="token selector"><span class="token id">#box</span>~<span class="token class">.long</span></span><span class="token punctuation">{</span>    <span class="token property">background</span><span class="token punctuation">:</span> <span class="token hexcode">#FFF</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* 找到id为box的元素后面class名为long的兄弟节点 */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="结构性伪类选择器"><a href="#结构性伪类选择器" class="headerlink" title="结构性伪类选择器"></a>结构性伪类选择器</h3><h4 id="伪元素选择器"><a href="#伪元素选择器" class="headerlink" title="伪元素选择器"></a>伪元素选择器</h4><p>针对CSS3中已经定义好的伪元素使用的选择器</p><p>语法： <code>选择器：伪元素{属性：值}</code></p><table><thead><tr><th style="text-align:center">选择器名称</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">E:first-line</td><td style="text-align:center">设置对象内的第一行样式。</td></tr><tr><td style="text-align:center">E:first-letter</td><td style="text-align:center">设置对象内的第一个字符样式。</td></tr><tr><td style="text-align:center">E:before</td><td style="text-align:center">设置在对象前（依据对象树的逻辑结构）发生的内容。用来和content属性一起使用，并且必须定义content属性</td></tr><tr><td style="text-align:center">E:after</td><td style="text-align:center">设置在对象后发生的内容。用来和content属性一起使用，并且必须定义content属性。</td></tr></tbody></table><h4 id="root选择器"><a href="#root选择器" class="headerlink" title=":root选择器"></a><code>:root</code>选择器</h4><p>用于匹配文档根元素，在HTML中，根元素始终是html元素。</p><p>使用<code>:root</code>选择器定义的样式，对所有的页面样式生效。对于不需要该样式的元素，可以设置单独样式进行覆盖。</p><h4 id="not选择器"><a href="#not选择器" class="headerlink" title=":not选择器"></a><code>:not</code>选择器</h4><p>对于某个结构元素使用样式但是想排除这个结构元素下面的子结构元素，让它不使用这个样式，可以使用<code>:not</code>选择器。</p><h4 id="empty选择器"><a href="#empty选择器" class="headerlink" title=":empty选择器"></a><code>:empty</code>选择器</h4><p>用来选择没有子元素或文本内容为空的元素。</p><h4 id="target选择器"><a href="#target选择器" class="headerlink" title=":target选择器"></a><code>:target</code>选择器</h4><p>用于为页面中某个target元素（该元素的id被当做页面中的超链接来使用）指定样式。</p><p>只有用户单击了页面中的超链接，并且跳转到target元素后，<code>:target</code>选择器所设置的样式才会起作用。</p>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS3文本字体与颜色</title>
      <link href="/2019/01/03/%E6%96%87%E6%9C%AC%E5%AD%97%E4%BD%93%E4%B8%8E%E9%A2%9C%E8%89%B2/"/>
      <url>/2019/01/03/%E6%96%87%E6%9C%AC%E5%AD%97%E4%BD%93%E4%B8%8E%E9%A2%9C%E8%89%B2/</url>
      
        <content type="html"><![CDATA[<h1 id="文本，字体与颜色"><a href="#文本，字体与颜色" class="headerlink" title="文本，字体与颜色"></a>文本，字体与颜色</h1><p>[TOC]</p><h2 id="文本样式"><a href="#文本样式" class="headerlink" title="文本样式"></a>文本样式</h2><p>CSS3包含多个新的文字特性，包括文本阴影、自动换行、使用服务器端字体等。并且不需使用设计软件，比如PhotoShop。</p><h3 id="给文本添加阴影——text-shadow属性"><a href="#给文本添加阴影——text-shadow属性" class="headerlink" title="给文本添加阴影——text-shadow属性"></a>给文本添加阴影——<strong>text-shadow</strong>属性</h3><p><strong>语法</strong> : <code>text-shadow:h-shadow v-shadow blur color</code></p><table><thead><tr><th style="text-align:center">值</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">h-shadow</td><td style="text-align:center">必需。水平阴影的位置，允许负值</td></tr><tr><td style="text-align:center">v-shadow</td><td style="text-align:center">必需。垂直阴影的位置，允许负值</td></tr><tr><td style="text-align:center">blur</td><td style="text-align:center">可选。模糊距离。</td></tr><tr><td style="text-align:center">color</td><td style="text-align:center">可选。阴影的颜色。</td></tr></tbody></table><p><strong>霓虹灯效果  (设计阴影不发生偏移，同时定义阴影模糊显示)</strong></p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">    <span class="token selector">p</span><span class="token punctuation">{</span>        <span class="token property">font-weight</span><span class="token punctuation">:</span> bold<span class="token punctuation">;</span>        <span class="token property">text-shadow</span><span class="token punctuation">:</span> <span class="token number">0</span>px <span class="token number">0</span>px <span class="token number">3</span>px red<span class="token punctuation">;</span>    <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>        霓虹灯效果;    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>指定多个阴影</strong></p><p>可以使用text-shadow给文字指定多个阴影，并且针对每个阴影使用不同颜色，多个阴影使用<strong>逗号</strong>分隔</p><ul><li><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">    <span class="token selector">div</span><span class="token punctuation">{</span>        <span class="token property">text-shadow</span><span class="token punctuation">:</span> <span class="token number">10</span>px <span class="token number">10</span>px black,                     <span class="token number">20</span>px <span class="token number">20</span>px red,                     <span class="token number">30</span>px <span class="token number">30</span>px blue<span class="token punctuation">;</span>    <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p><strong>定义火焰文字</strong></p><p><strong>定义立体文字</strong></p><h3 id="文本自动换行"><a href="#文本自动换行" class="headerlink" title="文本自动换行"></a>文本自动换行</h3><h4 id="让文本自动换行——word-wrap属性"><a href="#让文本自动换行——word-wrap属性" class="headerlink" title="让文本自动换行——word-wrap属性"></a>让文本自动换行——<strong>word-wrap</strong>属性</h4><p>设置当前行超过容器的边界时是否断开转行，默认值为normal。</p><p>语法  <code>word-wrap:normal | break-word</code></p><table><thead><tr><th style="text-align:center">值</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">normal</td><td style="text-align:center">只在允许的断点字换行（浏览器默认处理）。</td></tr><tr><td style="text-align:center">break-word</td><td style="text-align:center">在长单词或URL地址内部进行换行。</td></tr></tbody></table><h4 id="让文本自动换行——work-break属性"><a href="#让文本自动换行——work-break属性" class="headerlink" title="让文本自动换行——work-break属性"></a>让文本自动换行——<strong>work-break</strong>属性</h4><p>可以让浏览器实现半角空格或连字符后面的换行，而且可以实现任意位置的换行。默认值为normal。</p><p>语法： <code>word-break: normal | break-all | keep-all</code></p><table><thead><tr><th style="text-align:center">值</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">normal</td><td style="text-align:center">使用浏览器默认换行规则。</td></tr><tr><td style="text-align:center">break-all</td><td style="text-align:center">允许在单词内换行。</td></tr><tr><td style="text-align:center">keep-all</td><td style="text-align:center">只能在半角空格或连字符处换行。</td></tr></tbody></table><h2 id="字体样式"><a href="#字体样式" class="headerlink" title="字体样式"></a>字体样式</h2><h3 id="使用服务器端字体"><a href="#使用服务器端字体" class="headerlink" title="使用服务器端字体"></a>使用服务器端字体</h3><p>在CSS3中，新增了Web Fonts功能，网页中可以使用安装在服务器端的字体，它会在需要时被自动下载到用户的计算机上</p><p>实现网页中插入特殊字体的过程：</p><ol><li><p>获取特殊字体</p><p><a href="http://www.dafont.com/single-malta.font" target="_blank" rel="noopener">http://www.dafont.com/single-malta.font</a></p></li><li><p>获取@font-face所需字体格式</p><p><a href="http://www.fontsquirrel.com/tools/webfont-generator" target="_blank" rel="noopener">http://www.fontsquirrel.com/tools/webfont-generator</a></p></li><li><p>应用@font-face到项目中</p></li></ol><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">    <span class="token atrule"><span class="token rule">@font-face</span></span><span class="token punctuation">{</span>        <span class="token property">font-family</span><span class="token punctuation">:</span> WebFont<span class="token punctuation">;</span>        <span class="token property">src</span><span class="token punctuation">:</span> <span class="token url">url('webfontkit/singlemalta-webfont.fff')</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector">h1</span><span class="token punctuation">{</span>        <span class="token property">font-family</span><span class="token punctuation">:</span>WebFont<span class="token punctuation">;</span>    <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="颜色样式"><a href="#颜色样式" class="headerlink" title="颜色样式"></a>颜色样式</h2><p>CSS3 增加了3种颜色值定义模式：RGBA颜色值、HSL颜色值和HSLA颜色值。</p><p>兼容：IE9+    Firefox3    Chrome    Safari以及Opear10+ </p><h3 id="RGBA颜色"><a href="#RGBA颜色" class="headerlink" title="RGBA颜色"></a>RGBA颜色</h3><p>RGBA颜色是RGB颜色值的扩展，带有一个透明度通道。</p><p><code>egba(red,green,blue,&lt;opacity&gt;)</code></p><p>opacity是介于0.0(完全透明)和1.0(完全不透明)的数字。</p><h3 id="HSL颜色"><a href="#HSL颜色" class="headerlink" title="HSL颜色"></a>HSL颜色</h3><p>HSL色彩模式是工业界的一种颜色标准，通过对色相(Hue)、饱和度(Saturation)、和亮度(Lightness)三个颜色通道的变化以及它们相互之间的叠加来获得各种颜色。</p><p><code>hsl(hue,saturation,lightness);</code></p><h4 id="色相-Hue"><a href="#色相-Hue" class="headerlink" title="色相(Hue)"></a>色相(Hue)</h4><p>是色盘上的度数(从0到360) -0是红色，120是绿色，240是蓝色。</p><h4 id="饱和度-Saturation"><a href="#饱和度-Saturation" class="headerlink" title="饱和度(Saturation)"></a>饱和度(Saturation)</h4><p>表示色彩被使用了多少，或者说色彩的深浅程度、鲜艳程度。取值为0%-100%，其中0%意味着灰度，即没有使用该颜色；100%饱和度最高，即颜色最艳。</p><h4 id="亮度-Lightness"><a href="#亮度-Lightness" class="headerlink" title="亮度(Lightness)"></a>亮度(Lightness)</h4><p>取值为0%-100%。其中0%最暗，显示为黑色；100%最亮，显示为白色。</p><h3 id="HSLA颜色"><a href="#HSLA颜色" class="headerlink" title="HSLA颜色"></a>HSLA颜色</h3><p>HSLA颜色是HSL颜色的扩展，带有一个透明度通道</p><p><code>hsla(hue,saturation,lightness,opacity)</code></p><p>opacity介于0.0-1.0</p>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS 样式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript this的四种绑定方式</title>
      <link href="/2019/01/03/JavaScript-this%E7%9A%84%E5%9B%9B%E7%A7%8D%E7%BB%91%E5%AE%9A%E6%96%B9%E5%BC%8F/"/>
      <url>/2019/01/03/JavaScript-this%E7%9A%84%E5%9B%9B%E7%A7%8D%E7%BB%91%E5%AE%9A%E6%96%B9%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="JavaScript函数中this的四种绑定"><a href="#JavaScript函数中this的四种绑定" class="headerlink" title="JavaScript函数中this的四种绑定"></a>JavaScript函数中<code>this</code>的四种绑定</h1><p>[TOC]</p><h2 id="this的四种绑定"><a href="#this的四种绑定" class="headerlink" title="this的四种绑定"></a><code>this</code>的四种绑定</h2><ul><li>默认绑定</li><li>隐式绑定</li><li>显式绑定</li><li>new绑定</li></ul><h3 id="1-默认绑定"><a href="#1-默认绑定" class="headerlink" title="1. 默认绑定"></a>1. 默认绑定</h3><p>当一个函数没有明确的<strong>调用对象</strong>的时候，也就是单纯作为独立函数调用的时候，将对函数的<code>this</code>使用默认绑定：绑定到全局的<code>window</code>对象</p><p>如果在严格模式下（<code>use strict</code>），<code>this</code>会指向<code>undefined</code></p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 第一个例子</span><span class="token keyword">var</span> foo <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 2 </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 第二个例子</span><span class="token keyword">var</span> foo <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> a <span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> inner <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">inner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第二个例子虽然在<code>foo()</code>的作用域内声明了<code>a = 3</code>，但它并不是一个对象，所以<code>this</code>最终还是指向了<code>window</code>对象。</p><h3 id="2-隐式绑定"><a href="#2-隐式绑定" class="headerlink" title="2.隐式绑定"></a>2.隐式绑定</h3><p>函数被调用时有上下文对象，那么<code>this</code>会绑定这个上下文对象。</p><p>也就是： <strong>当函数被一个对象包含的时候，我们称这个函数的<code>this</code>被隐式绑定到这个对象上了</strong></p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 例子</span><span class="token keyword">var</span> o <span class="token operator">=</span> <span class="token punctuation">{</span>    a<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    foo<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>o<span class="token punctuation">.</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>在一串对象属性引用链中，<code>this</code>绑定的是最内层的对象</strong></p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 例子2</span><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>    a<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    obj2<span class="token punctuation">:</span> <span class="token punctuation">{</span>        a<span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">,</span>        obj3<span class="token punctuation">:</span> <span class="token punctuation">{</span>            a<span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">,</span>            getA<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>obj<span class="token punctuation">.</span>obj2<span class="token punctuation">.</span>obj3<span class="token punctuation">.</span><span class="token function">getA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="隐式丢失"><a href="#隐式丢失" class="headerlink" title="隐式丢失"></a>隐式丢失</h4><p>最常见的<code>this</code>绑定问题就是被隐式绑定的函数会丢失绑定对象，也就是它会应用默认绑定，把<code>this</code>绑定到全局对象或者<code>undefined</code>上</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 例子</span><span class="token keyword">var</span> foo <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>    a<span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">,</span>    foo<span class="token punctuation">:</span> foo<span class="token punctuation">}</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token keyword">var</span> bar <span class="token operator">=</span> obj<span class="token punctuation">.</span>foo<span class="token punctuation">;</span><span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 5</span>obj<span class="token punctuation">.</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>像这个例子，<strong>obj对象把foo函数引用传给bar的时候，会丢失<code>this</code>对obj的绑定。</strong></p><p><strong>回调函数同样也会丢失绑定。</strong></p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> foo <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>    a<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    foo<span class="token punctuation">:</span> foo<span class="token punctuation">}</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token function">setTimeout</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>foo<span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 5</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>这种函数赋值的方式是无法将函数所绑定的this对象也传递过去的</strong></p><p>那如果我就是想传递函数并且把所绑定的this对象也传递过去呢？<br>那么你可以使用显式绑定，当然还有别的办法，ES6中的箭头函数，以及很常用的<code>var self = this</code>。</p><p>可以参考这篇文章<a href="https://blog.csdn.net/qq799028706/article/details/85545192" target="_blank" rel="noopener">解决隐式丢失问题的办法</a></p><h3 id="3-显式绑定"><a href="#3-显式绑定" class="headerlink" title="3.显式绑定"></a>3.显式绑定</h3><p>显式绑定式通过<code>apply</code>或者<code>call</code>函数绑定的对象。</p><p>如果你想传递函数并且把所绑定的<code>this</code>对象也传递过去，那么就可以使用<code>call()</code></p><pre class="line-numbers language-javascript"><code class="language-javascript">fn<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// fn是你调用的函数</span><span class="token comment" spellcheck="true">// object是你希望绑定的对象</span><span class="token comment" spellcheck="true">// 作用：即刻调用函数fn(),调用时这个函数的this指向object</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 例子</span><span class="token keyword">var</span> foo <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>    a<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">}</span>foo<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样做有个缺点，每次调用都会依赖<code>call</code>。</p><p>所以可以将他包装成函数。</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> foo <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>    a<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token keyword">var</span> bar <span class="token operator">=</span> <span class="token function">funtion</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    foo<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果使用<code>bind</code>会更简单</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> foo <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">{</span>    a<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token keyword">var</span> bar <span class="token operator">=</span> foo<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>call</code>和<code>bind</code>的区别是——在绑定到<code>this</code>对象参数的同时：</p><ol><li><code>call</code>将立即执行该函数。</li><li><code>bind</code>不执行函数，只返回一个可供执行的函数。</li></ol><h3 id="new绑定"><a href="#new绑定" class="headerlink" title="new绑定"></a><code>new</code>绑定</h3><p>用<code>new</code>来调用函数，会自动执行下列操作：</p><ol><li>创建一个全新的对象</li><li>这个新对象被执行<code>[[prototype]]</code>连接</li><li>这个新对象会绑定到函数调用的<code>this</code></li><li>如果函数没有返回其他对象，那么<code>new</code>表达式中的函数调用会自动返回这个新对象</li></ol><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 例子</span><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>a <span class="token operator">=</span> a<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> bar <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">foo</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>bar<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="优先级"><a href="#优先级" class="headerlink" title="优先级"></a>优先级</h3><p><strong><code>new</code>绑定 -&gt; 显式绑定 -&gt; 隐式绑定 -&gt; 默认绑定</strong></p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
            <tag> 函数 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>about</title>
      <link href="/about/index-1.html"/>
      <url>/about/index-1.html</url>
      
        <content type="html"><![CDATA[<h2 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World!"></a>Hello World!</h2>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>About</title>
      <link href="/about/index.html"/>
      <url>/about/index.html</url>
      
        <content type="html"><![CDATA[<h2 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World!"></a>Hello World!</h2>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>categories</title>
      <link href="/categories/index-1.html"/>
      <url>/categories/index-1.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>categories</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>gallery</title>
      <link href="/gallery/index.html"/>
      <url>/gallery/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>tags</title>
      <link href="/tags/index-1.html"/>
      <url>/tags/index-1.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>tags</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
  
</search>
